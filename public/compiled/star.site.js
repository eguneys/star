(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.Star = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

require("./standalones/util");

require("./standalones/trans");

require("./socket");

require("./main");

},{"./main":2,"./socket":3,"./standalones/trans":4,"./standalones/util":5}],2:[function(require,module,exports){
"use strict";

(function () {})();

},{}],3:[function(require,module,exports){
"use strict";

function makeAckable(send) {
  var currentId = 1;
  var messages = [];

  function resend() {
    var resendCutoff = Date.now() - 2500;
    messages.forEach(function (m) {
      if (m.at < resendCutoff) send(m.t, m.d);
    });
  }

  setInterval(resend, 1000);
  return {
    resend: resend,
    register: function register(t, d) {
      d.a = currentId++;
      messages.push({
        t: t,
        d: d,
        at: Date.now()
      });
    },
    gotAck: function gotAck(id) {
      messages = messages.filter(function (m) {
        return m.d.a !== id;
      });
    }
  };
}

star.StrongSocket = function (url, version, settings) {
  var now = Date.now;
  settings = $.extend(true, {}, star.StrongSocket.defaults, settings);
  var options = settings.options;
  var ws;
  var pingSchedule;
  var connectSchedule;
  var ackable = makeAckable(function (t, d) {
    send(t, d);
  });
  var lastPingTime = now();
  var pongCount = 0;
  var _averageLag = 0;
  var tryOtherUrl = false;
  var autoReconnect = true;
  var nbConnects = 0;
  var storage = star.storage.make('surl6');

  var connect = function connect() {
    destroy();
    autoReconnect = true;
    var params = $.param(settings.params);
    if (version !== false) params += (params ? '&' : '') + 'v=' + version;
    var fullUrl = options.protocol + '//' + baseUrl() + url + '?' + params;
    debug("connection attempt to " + fullUrl);

    try {
      ws = new WebSocket(fullUrl);

      ws.onerror = function (e) {
        onError(e);
      };

      ws.onclose = function (e) {
        if (autoReconnect) {
          debug("Will autoreconnect in " + options.autoReconnectDelay);
          scheduleConnect(options.autoReconectDelay);
        }
      };

      ws.onopen = function () {
        debug("connected to " + fullUrl);
        onSuccess();
        $("body").removeClass("offline").addClass("online");
        pingNow();
        ackable.resend();
      };

      ws.onmessage = function (e) {
        if (e.data === 0) {
          pong();
          return;
        }

        var m = JSON.parse(e.data);
        if (m.t === 'n') pong();
        if (m.t === 'b') m.d.forEach(handle);else handle(m);
      };
    } catch (e) {
      onError(e);
    }

    scheduleConnect(options.pingMaxLag);
  };

  var send = function send(t, d, o, noRetry) {
    o = o || {};
    var msg = {
      t: t
    };

    if (d !== undefined) {
      if (o.withLag) d.l = Math.round(_averageLag);
      if (o.millis >= 0) d.s = Math.round(o.millis * 0.1).toString(36);
      msg.d = d;
    }

    if (o.ackable) {
      msg.d = msg.d || {};
      ackable.register(t, msg.d);
    }

    var message = JSON.stringify(msg);
    debug("send " + message);

    try {
      ws.send(message);
    } catch (e) {
      if (!noRetry) setTimeout(function () {
        send(t, msg.d, o, true);
      }, 1000);
    }
  };

  var scheduleConnect = function scheduleConnect(delay) {
    if (options.idle) delay = 10 * 1000 + Math.random() * 10 * 1000;
    clearTimeout(pingSchedule);
    clearTimeout(connectSchedule);
    connectSchedule = setTimeout(function () {
      $('body').addClass('offline').removeClass('online');
      tryOtherUrl = true;
      connect();
    }, delay);
  };

  var schedulePing = function schedulePing(delay) {
    clearTimeout(pingSchedule);
    pingSchedule = setTimeout(pingNow, delay);
  };

  var pingNow = function pingNow() {
    clearTimeout(pingSchedule);
    clearTimeout(connectSchedule);
    var pingData = options.isAuth && pongCount % 8 == 2 ? JSON.stringify({
      t: 'p',
      l: Math.round(0.1 * _averageLag),
      v: version
    }) : null;

    try {
      ws.send(pingData);
      lastPingTime = now();
    } catch (e) {
      debug(e, true);
    }

    scheduleConnect(options.pingMaxLag);
  };

  var computePingDelay = function computePingDelay() {
    return options.pingDelay + (options.idle ? 1000 : 0);
  };

  var pong = function pong() {
    clearTimeout(connectSchedule);
    schedulePing(computePingDelay());
    var currentLag = Math.min(now() - lastPingTime, 10000);
    pongCount++;
    var mix = pongCount > 4 ? 0.1 : 1 / pongCount;
    _averageLag += mix * (currentLag - _averageLag);
  };

  var handle = function handle(m) {
    if (m.v) {
      if (m.v <= version) {
        debug("already has event " + m.v);
        return;
      }

      if (m.v > version + 1) {
        star.reload();
        return;
      }

      version = m.v;
    }

    switch (m.t || false) {
      case false:
        break;

      case 'resync':
        star.reload();
        break;

      case 'ack':
        ackable.gotAck(m.d);
        break;

      default:
        var processed = settings.receive && settings.receive(m.t, m.d);
        if (!processed && settings.events[m.t]) settings.events[m.t](m.d || null, m);
    }
  };

  var debug = function debug(msg, always) {
    if (always || options.debug) {
      console.debug("[" + options.name + " " + settings.params.sri + "]", msg);
    }
  };

  var destroy = function destroy() {
    clearTimeout(pingSchedule);
    clearTimeout(connectSchedule);
    disconnect();
    ws = null;
  };

  var disconnect = function disconnect(onNextConnect) {
    if (ws) {
      debug("Disconnect");
      autoReconnect = false;
      ws.onerror = ws.onclose = ws.onopen = ws.onmessage = $.noop;
      ws.close();
    }

    if (onNextConnect) options.onNextConnect = onNextConnect;
  };

  var onError = function onError(e) {
    options.debug = true;
    debug('error: ' + JSON.stringify(e));
    tryOtherUrl = true;
    clearTimeout(pingSchedule);
  };

  var onSuccess = function onSuccess() {
    nbConnects++;

    if (nbConnects === 1) {
      options.onFirstConnect();
    }
  };

  var baseUrl = function baseUrl() {
    var urls = options.baseUrls,
        url = storage.get();

    if (!url) {
      url = urls[0];
      storage.set(url);
    } else if (tryOtherUrl) {
      tryOtherUrl = false;
      url = urls[(urls.indexOf(url) + 1) % urls.length];
      storage.set(url);
    }

    return url;
  };

  connect();
  window.addEventListener('unload', destroy);
  return {
    connect: connect,
    disconnect: disconnect,
    send: send,
    destroy: destroy,
    options: options,
    pingInterval: function pingInterval() {
      return computePingInterval() + _averageLag;
    },
    averageLag: function averageLag() {
      return _averageLag;
    },
    getVersion: function getVersion() {
      return version;
    }
  };
};

star.StrongSocket.sri = Math.random().toString(36).slice(2, 12);
star.StrongSocket.defaults = {
  events: {},
  params: {
    sri: star.StrongSocket.sri
  },
  options: {
    name: 'unnamed',
    idle: false,
    pingMaxLag: 9000,
    pingDelay: 2500,
    autoReconnectDelay: 3500,
    protocol: location.protocol === 'https:' ? 'wss:' : 'ws:',
    baseUrls: function (d) {
      return [d].concat((d === 'socket.oyunkeyf.net' || d === 'socket.o.com' ? [1, 2, 5, 6] : []).map(function (port) {
        return d + ':' + (9020 + port);
      }));
    }(document.body.getAttribute('data-socket-domain')),
    onFirstConnect: $.noop
  }
};

},{}],4:[function(require,module,exports){
"use strict";

star.trans = function (i18n) {
  var format = function format(str, args) {
    if (args.length && str.includes('$s')) for (var i = 1; i < 4; i++) {
      str = str.replace('%' + i + '$s', args[i - 1]);
    }
    args.forEach(function (arg) {
      str = str.replace('%s', arg);
    });
    return str;
  };

  var list = function list(str, args) {
    var segments = str.split(/(%(?:\d\$)?s)/g);

    for (var i = 1; i <= args.length; i++) {
      var pos = segments.indexOf('%' + i + '$s');
      if (pos !== -1) segments[pos] = args[i - 1];
    }

    for (var i = 0; i < args.length; i++) {
      var pos = segments.indexOf('%s');
      if (pos === -1) break;
      segments[pos] = args[i];
    }

    return segments;
  };

  var trans = function trans(key) {
    var str = i18n[key];
    return str ? format(str, Array.prototype.slice.call(arguments, 1)) : key;
  };

  trans.noarg = function (key) {
    // optimisation for translations without arguments
    return i18n[key] || key;
  };

  trans.vdom = function (key) {
    var str = i18n[key];
    return str ? list(str, Array.prototype.slice.call(arguments, 1)) : [key];
  };

  return trans;
};

},{}],5:[function(require,module,exports){
"use strict";

window.star = window.star || {};

star.storage = function () {
  var storage = window.localStorage;
  var api = {
    get: function get(k) {
      return storage.getItem(k);
    },
    set: function set(k, v) {
      storage.setItem(k, v);
    },
    remove: function remove(k) {
      storage.removeItem(k);
    },
    make: function make(k) {
      return {
        get: function get() {
          return api.get(k);
        },
        set: function set(v) {
          api.set(k, v);
        },
        remove: function remove() {
          api.remove(k);
        },
        listen: function listen(f) {
          window.addEventListener('storage', function (e) {
            if (e.key === k && e.storageArea === storage && e.newValue !== null) f(e);
          });
        }
      };
    }
  };
  return api;
}();

},{}]},{},[1])(1)
});

//# sourceMappingURL=data:application/json;charset=utf-8;base64,
